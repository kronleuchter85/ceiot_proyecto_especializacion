{"name":"df-data-cleansing","ppdf:dataflowId":"07f30a23-5c01-4d67-8abe-5a531b9924b9","ppdf:owner":{"tenantId":"d73ae325-5b3c-4a16-b594-58f5f19b4646","userId":"8fa12345-bd24-435b-a888-c7d2b764e146"},"ppdf:fastCopy":true,"version":"1.0","culture":"en-US","modifiedTime":"2025-07-05T12:49:28.1436084+00:00","ppdf:outputFileFormat":"Parquet","pbi:mashup":{"fastCombine":false,"allowNativeQueries":true,"queriesMetadata":{"DefaultDestination":{"queryId":"c016f4e0-6dde-46ac-ba0a-6db9bef5fcab","queryName":"DefaultDestination"},"iot_silver contracts":{"queryId":"6551da72-f41c-432c-a4d8-3780c9f30675","queryName":"iot_silver contracts"},"iot_silver readings":{"queryId":"574ee31a-42ef-44ee-b286-83532e471637","queryName":"iot_silver readings"},"iot_silver transactions":{"queryId":"2f377b8a-f3b7-4c72-9959-112533faf641","queryName":"iot_silver transactions"},"iot_silver contracts_DataDestination":{"queryId":"55e2c1f0-8cff-426e-ac45-4e684c414ced","queryName":"iot_silver contracts_DataDestination"},"iot_silver readings_DataDestination":{"queryId":"9a7a7a72-c760-4d53-b54c-05fea2bad48e","queryName":"iot_silver readings_DataDestination"},"iot_silver transactions_DataDestination":{"queryId":"f9333ef4-efcb-42e3-a98f-2760277978c1","queryName":"iot_silver transactions_DataDestination"},"iot_silver contracts_WriteToDataDestination":{"queryId":"dcc2e88a-9b32-406f-b6c0-1950ca6a06b7","queryName":"iot_silver contracts_WriteToDataDestination"},"iot_silver contracts_TransformForWriteToDataDestination":{"queryId":"327e0d1f-0c4c-477d-8b9c-68a0fee8754f","queryName":"iot_silver contracts_TransformForWriteToDataDestination"},"FastCopyStaging":{"queryId":"48d42551-10dc-4d18-bb67-aa62791a17d2","queryName":"FastCopyStaging"},"iot_silver readings_WriteToDataDestination":{"queryId":"e1c978f6-5e48-4e48-8e32-ac1d76bd5eac","queryName":"iot_silver readings_WriteToDataDestination"},"iot_silver readings_TransformForWriteToDataDestination":{"queryId":"4fc5c32b-2d80-4df1-989a-d59e450b190b","queryName":"iot_silver readings_TransformForWriteToDataDestination"},"iot_silver transactions_WriteToDataDestination":{"queryId":"828250fc-8692-4784-b761-f9a4c5e1668b","queryName":"iot_silver transactions_WriteToDataDestination"},"iot_silver transactions_TransformForWriteToDataDestination":{"queryId":"50297ecb-f78e-484e-b07b-0913d10f88a8","queryName":"iot_silver transactions_TransformForWriteToDataDestination"}},"document":"section Section1;\r\nshared DefaultDestination = let\r\n  DefaultDestination = Lakehouse.Contents([EnableFolding = false]){[workspaceId = \"81312666-c3bb-44e3-8440-2a9d4e96896a\"]}[Data]{[lakehouseId = \"6f5a4d4e-75bb-4c72-834b-c5ee0240943c\"]}[Data]\r\nin\r\n  DefaultDestination;\r\nshared #\"iot_silver contracts\" = let\n  Source = Lakehouse.Contents(null),\n  Navigation = Source{[workspaceId = \"81312666-c3bb-44e3-8440-2a9d4e96896a\"]}[Data],\n  #\"Navigation 1\" = Navigation{[lakehouseId = \"6f5a4d4e-75bb-4c72-834b-c5ee0240943c\"]}[Data],\n  #\"Navigation 2\" = #\"Navigation 1\"{[Id = \"iot_bronze.contracts\", ItemKind = \"Table\"]}[Data],\n  #\"Changed column type\" = Table.TransformColumnTypes(#\"Navigation 2\", {{\"contractBlockNumber\", Int64.Type}}),\n  #\"Lowercased text\" = Table.TransformColumns(#\"Changed column type\", {{\"contractAddress\", each Text.Lower(_), type nullable text}}),\n  #\"Lowercased text 1\" = Table.TransformColumns(#\"Lowercased text\", {{\"contractTransactionHash\", each Text.Lower(_), type nullable text}}),\n  #\"Added custom\" = Table.TransformColumnTypes(Table.AddColumn(#\"Lowercased text 1\", \"datetime\", each DateTime.FromText(\n    Text.Start([timestamp], 4) & \"-\" &\n    Text.Middle([timestamp], 4, 2) & \"-\" &\n    Text.Middle([timestamp], 6, 2) & \" \" &\n    Text.Middle([timestamp], 9, 2) & \":\" &\n    Text.Middle([timestamp], 11, 2) & \":\" &\n    Text.End([timestamp], 2)\n)), {{\"datetime\", type datetime}}),\n  #\"Removed columns\" = Table.RemoveColumns(#\"Added custom\", {\"contractABI.anonymous\", \"contractABI.inputs.indexed\", \"contractABI.inputs.internalType\", \"contractABI.inputs.name\", \"contractABI.inputs.type\", \"contractABI.type\", \"contractABI.signature\", \"timestamp\", \"contractABI.outputs\", \"contractABI.stateMutability\", \"contractABI.name\"}),\n  #\"Removed duplicates\" = Table.Distinct(#\"Removed columns\", {\"contractTransactionHash\"})\nin\n  #\"Removed duplicates\";\r\nshared #\"iot_silver readings\" = let\n  Source = Lakehouse.Contents(null),\n  Navigation = Source{[workspaceId = \"81312666-c3bb-44e3-8440-2a9d4e96896a\"]}[Data],\n  #\"Navigation 1\" = Navigation{[lakehouseId = \"6f5a4d4e-75bb-4c72-834b-c5ee0240943c\"]}[Data],\n  #\"Navigation 2\" = #\"Navigation 1\"{[Id = \"iot_bronze.readings\", ItemKind = \"Table\"]}[Data],\n  #\"Changed column type\" = Table.TransformColumnTypes(#\"Navigation 2\", {{\"value\", type number}, {\"geoLat\", type number}, {\"geoLong\", type number}, {\"date\", type date}, {\"time\", type time}}),\n  #\"Lowercased text\" = Table.TransformColumns(#\"Changed column type\", {{\"id\", each Text.Lower(_), type nullable text}}),\n  #\"Lowercased text 1\" = Table.TransformColumns(#\"Lowercased text\", {{\"tx_id\", each Text.Lower(_), type nullable text}}),\n  #\"Added custom\" = Table.TransformColumnTypes(Table.AddColumn(#\"Lowercased text 1\", \"datetime\", each [date] & [time]), {{\"datetime\", type datetime}}),\n  #\"Removed columns\" = Table.RemoveColumns(#\"Added custom\", {\"date\", \"time\"})\nin\n  #\"Removed columns\";\r\nshared #\"iot_silver transactions\" = let\n  Source = Lakehouse.Contents(null),\n  Navigation = Source{[workspaceId = \"81312666-c3bb-44e3-8440-2a9d4e96896a\"]}[Data],\n  #\"Navigation 1\" = Navigation{[lakehouseId = \"6f5a4d4e-75bb-4c72-834b-c5ee0240943c\"]}[Data],\n  #\"Navigation 2\" = #\"Navigation 1\"{[Id = \"iot_bronze.transactions\", ItemKind = \"Table\"]}[Data],\n  #\"Renamed columns\" = Table.RenameColumns(#\"Navigation 2\", {{\"txReceipt.type\", \"type\"}, {\"txReceipt.status\", \"status\"}, {\"txReceipt.cumulativeGasUsed\", \"cumulativeGasUsed\"}, {\"txReceipt.transactionIndex\", \"transactionIndex\"}, {\"txReceipt.blockNumber\", \"blockNumber\"}, {\"txReceipt.blockHash\", \"blockHash\"}, {\"txReceipt.transactionHash\", \"transactionHash\"}, {\"txReceipt.gasUsed\", \"gasUsed\"}, {\"txReceipt.effectiveGasPrice\", \"effectiveGasPrice\"}, {\"txReceipt.from\", \"tx_from\"}, {\"txReceipt.to\", \"tx_to\"}, {\"txExpense.operation\", \"operation\"}, {\"txExpense.eth_usd\", \"eth_usd_rate\"}, {\"txExpense.costEth\", \"costEth\"}, {\"txExpense.costUSD\", \"costUSD\"}}),\n  #\"Changed column type\" = Table.TransformColumnTypes(#\"Renamed columns\", {{\"type\", Int64.Type}, {\"status\", Int64.Type},{\"cumulativeGasUsed\", Int64.Type}, {\"transactionIndex\", Int64.Type}, {\"blockNumber\", Int64.Type}, {\"gasUsed\", Int64.Type}, {\"effectiveGasPrice\", Int64.Type}, {\"costEth\", type number}, {\"eth_usd_rate\", type number}, {\"costUSD\", type number}, {\"date\", type date}, {\"time\", type time}}),\n  #\"Lowercased text\" = Table.TransformColumns(#\"Changed column type\", {{\"tx_from\", each Text.Lower(_), type nullable text}}),\n  #\"Lowercased text 1\" = Table.TransformColumns(#\"Lowercased text\", {{\"tx_to\", each Text.Lower(_), type nullable text}}),\n  #\"Lowercased text 2\" = Table.TransformColumns(#\"Lowercased text 1\", {{\"blockHash\", each Text.Lower(_), type nullable text}}),\n  #\"Lowercased text 3\" = Table.TransformColumns(#\"Lowercased text 2\", {{\"transactionHash\", each Text.Lower(_), type nullable text}}),\n  #\"Added custom\" = Table.TransformColumnTypes(Table.AddColumn(#\"Lowercased text 3\", \"datetime\", each [date] & [time]), {{\"datetime\", type datetime}}),\n  #\"Removed columns\" = Table.RemoveColumns(#\"Added custom\", {\"txExpense.gasUsed\", \"txReceipt.logsBloom\", \"txReceipt.logs.logIndex\", \"txReceipt.logs.transactionHash\", \"txReceipt.logs.transactionIndex\", \"txReceipt.logs.blockNumber\", \"txReceipt.logs.blockHash\", \"txReceipt.logs.data\", \"txReceipt.logs.address\", \"txReceipt.logs.topics\", \"time\", \"date\", \"txReceipt.logs.removed\", \"txReceipt.logs\"})\nin\n  #\"Removed columns\";\r\nshared #\"iot_silver contracts_DataDestination\" = let\r\n  Pattern = Lakehouse.Contents([CreateNavigationProperties = false, EnableFolding = false]),\r\n  Navigation_1 = Pattern{[workspaceId = \"81312666-c3bb-44e3-8440-2a9d4e96896a\"]}[Data],\r\n  Navigation_2 = Navigation_1{[lakehouseId = \"6f5a4d4e-75bb-4c72-834b-c5ee0240943c\"]}[Data],\r\n  TableNavigation = Navigation_2{[Id = \"iot_silver_cleansed_contracts\", ItemKind = \"Table\"]}?[Data]?,\r\n  Table = NavigationTable.CreateTableOnDemand(TableNavigation, #table(type table[contractName = nullable Text.Type, contractAddress = nullable Text.Type, contractTransactionHash = nullable Text.Type, contractBlockNumber = nullable Int64.Type, network = nullable Text.Type, datetime = nullable DateTime.Type], {}), [DeleteWhenEmpty = true])\r\nin\r\n  Table;\r\nshared #\"iot_silver readings_DataDestination\" = let\r\n  Pattern = Lakehouse.Contents([CreateNavigationProperties = false, EnableFolding = false]),\r\n  Navigation_1 = Pattern{[workspaceId = \"81312666-c3bb-44e3-8440-2a9d4e96896a\"]}[Data],\r\n  Navigation_2 = Navigation_1{[lakehouseId = \"6f5a4d4e-75bb-4c72-834b-c5ee0240943c\"]}[Data],\r\n  TableNavigation = Navigation_2{[Id = \"iot_silver_cleansed_readings\", ItemKind = \"Table\"]}?[Data]?,\r\n  Table = NavigationTable.CreateTableOnDemand(TableNavigation, #table(type table[deviceId = nullable Text.Type, #\"type\" = nullable Text.Type, value = nullable Number.Type, geoLat = nullable Number.Type, geoLong = nullable Number.Type, id = nullable Text.Type, tx_id = nullable Text.Type, datetime = nullable DateTime.Type], {}), [DeleteWhenEmpty = true])\r\nin\r\n  Table;\r\nshared #\"iot_silver transactions_DataDestination\" = let\r\n  Pattern = Lakehouse.Contents([CreateNavigationProperties = false, EnableFolding = false]),\r\n  Navigation_1 = Pattern{[workspaceId = \"81312666-c3bb-44e3-8440-2a9d4e96896a\"]}[Data],\r\n  Navigation_2 = Navigation_1{[lakehouseId = \"6f5a4d4e-75bb-4c72-834b-c5ee0240943c\"]}[Data],\r\n  TableNavigation = Navigation_2{[Id = \"iot_silver_cleansed_transactions\", ItemKind = \"Table\"]}?[Data]?,\r\n  Table = NavigationTable.CreateTableOnDemand(TableNavigation, #table(type table[contractName = nullable Text.Type, methodName = nullable Text.Type, #\"type\" = nullable Int64.Type, status = nullable Int64.Type, cumulativeGasUsed = nullable Int64.Type, transactionHash = nullable Text.Type, transactionIndex = nullable Int64.Type, blockHash = nullable Text.Type, blockNumber = nullable Int64.Type, gasUsed = nullable Int64.Type, effectiveGasPrice = nullable Int64.Type, tx_from = nullable Text.Type, tx_to = nullable Text.Type, operation = nullable Text.Type, costEth = nullable Number.Type, eth_usd_rate = nullable Number.Type, costUSD = nullable Number.Type, datetime = nullable DateTime.Type], {}), [DeleteWhenEmpty = true])\r\nin\r\n  Table;\r\nshared DefaultStaging = let\r\n  DefaultStaging = Pipeline.DefaultModelStorage()\r\nin\r\n  DefaultStaging;\r\n[Staging = \"FastCopyStaging\"]\r\nshared #\"iot_silver contracts_WriteToDataDestination\" = let\r\n  #\"iot_silver contracts_WriteToDataDestination\" = Pipeline.ExecuteAction(ValueAction.WithTransaction([Target = #\"iot_silver contracts_DataDestination\"], (txn) => {TableAction.DeleteRows(txn[Target]), () => TableAction.InsertRows(txn[Target], #\"iot_silver contracts_TransformForWriteToDataDestination\"), Action.DoNothing}))\r\nin\r\n  #\"iot_silver contracts_WriteToDataDestination\";\r\nshared #\"iot_silver contracts_TransformForWriteToDataDestination\" = let\r\n    SourceTable = Table.SelectColumns(#\"iot_silver contracts\", {\"contractName\", \"contractAddress\", \"contractTransactionHash\", \"contractBlockNumber\", \"network\", \"datetime\"})\r\nin\r\n    SourceTable;\r\nshared FastCopyStaging = let\r\n  FastCopyStaging = Pipeline.FastCopyModelStorage(DefaultStaging, [Required = false])\r\nin\r\n  FastCopyStaging;\r\n[Staging = \"FastCopyStaging\"]\r\nshared #\"iot_silver readings_WriteToDataDestination\" = let\r\n  #\"iot_silver readings_WriteToDataDestination\" = Pipeline.ExecuteAction(ValueAction.WithTransaction([Target = #\"iot_silver readings_DataDestination\"], (txn) => {TableAction.DeleteRows(txn[Target]), () => TableAction.InsertRows(txn[Target], #\"iot_silver readings_TransformForWriteToDataDestination\"), Action.DoNothing}))\r\nin\r\n  #\"iot_silver readings_WriteToDataDestination\";\r\nshared #\"iot_silver readings_TransformForWriteToDataDestination\" = let\r\n    SourceTable = Table.SelectColumns(#\"iot_silver readings\", {\"deviceId\", \"type\", \"value\", \"geoLat\", \"geoLong\", \"id\", \"tx_id\", \"datetime\"})\r\nin\r\n    SourceTable;\r\n[Staging = \"FastCopyStaging\"]\r\nshared #\"iot_silver transactions_WriteToDataDestination\" = let\r\n  #\"iot_silver transactions_WriteToDataDestination\" = Pipeline.ExecuteAction(ValueAction.WithTransaction([Target = #\"iot_silver transactions_DataDestination\"], (txn) => {TableAction.DeleteRows(txn[Target]), () => TableAction.InsertRows(txn[Target], #\"iot_silver transactions_TransformForWriteToDataDestination\"), Action.DoNothing}))\r\nin\r\n  #\"iot_silver transactions_WriteToDataDestination\";\r\nshared #\"iot_silver transactions_TransformForWriteToDataDestination\" = let\r\n    SourceTable = Table.SelectColumns(#\"iot_silver transactions\", {\"contractName\", \"methodName\", \"type\", \"status\", \"cumulativeGasUsed\", \"transactionHash\", \"transactionIndex\", \"blockHash\", \"blockNumber\", \"gasUsed\", \"effectiveGasPrice\", \"tx_from\", \"tx_to\", \"operation\", \"costEth\", \"eth_usd_rate\", \"costUSD\", \"datetime\"})\r\nin\r\n    SourceTable;\r\n","connectionOverrides":[{"path":"Lakehouse","kind":"Lakehouse","provider":"CdsA","authenticationKind":null,"environmentName":null,"apiName":null,"connectionName":"{\"kind\":\"Lakehouse\",\"path\":\"Lakehouse\"}","audience":null}],"trustedConnections":[{"path":"Lakehouse","kind":"Lakehouse","provider":"CdsA","authenticationKind":null,"environmentName":null,"apiName":null,"connectionName":"{\"kind\":\"Lakehouse\",\"path\":\"Lakehouse\"}","audience":null}]}}